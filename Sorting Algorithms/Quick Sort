QUICKSORT(A, p, r) //initial call would be QUICKSORT(A, 1, A.length)
1    if p < r // if first element in the array is less than last element in array, then...
2        q = PARTITION(A, p, r) // we call the "PARTITION" function, which returns the index of the pivot
3        QUICKSORT(A, p, q - 1) // recursive call to "QUICKSORT". P is always 1, but q changes acording to the value of pivot returned in line before
4       QUICKSORT(A, q + 1, r) // recuresive call to "QUICKSORT". q + 1 is the pivot + 1. r is always array.length

- sorts in place (no combine needed)
"Worst case" = T(n) = T(n - 1) + T(0) + Ө(n) 
             = T(n - 1) + Ө(n)

= T(n - 1) + Ө(n) = Ө(n^2)  (occurs when the input array is already completely sorted or all keys are same)

"Best case" = T(n) = T(9n/10) + T(n/10) + cn = Ө(n lg n)
The recursion terminates at depth log10/9 n = Ө(lg n) 
The total cost of quick- sort is therefore O(n lg n)
// this is based on the split being 9 - 1 on every level. we even get O(n lg n) on a 99-1 split.            
//average case

PARTITION(A, p, r)
1    x = A[r] // x stores the "pivot", and it always the last element in the array
2    i = p - 1 //i and j work through the array. j starts at the first element, and increments by 1 regardless of what happens. i starts at j - 1
3   for j = p to r - 1 //j runs from the first element to the last element - 1.
4        if A[j] <= x //A[j] is compared with the x(pivot), and if A[j] is lower, then it is swapped with A[i].
5            i = i + 1 //if A[j] is lower than the pivot (x), i gets incremented by 1
6            exchange A[i] with A[j] //then we swap A[j] and A[i]
7    exchange a[i + 1] with A[r] // after our for loop is completed, we move our pivot to i + 1, i being the last location of a key that was lower than the pivot.
8    return i + 1 //we return the index of the pivot

     p=1             r=9
A = [2,3,6,7,1,5,4,9,8]

first we call "QUICKSORT(A, 1, 9)"

p < r = true, so we call "PARTITION(A, 1, 9)", the return value will be set to q.

we excute PARTITION:

x = A[9] = 8     i = 1 -1 = 0     j = p = 1
for loop will run from j = 1 to 8

j = 1:   A[1] 2 is smaller than 8(x), so i = 1 & we swap A[1] with A[1]

j = 2:   A[2] 3 is smaller than 8(x), so i = 2 & we swap A[2] with J[2]

j = 3:   A[3] 6 is smaller than 8(x), so i = 3 & we swap A[3] with J[3]

j = 4:   A[4] 7 is smaller than 8 (x), so i = 4 & we swap A[4] with A[4]

j = 5:   A[5] 1 is smaller than 8 (x), so i = 5 & we swap A[5] with A[5]

j = 6:   A[6] 5 is smaller than 8 (x), so i = 6 & we swap A[6] with A[6]

j = 7:   A[7] 4 is smaller than 8 (x), so i = 7 & we swap A[7] with A[7]

j = 8:   A[8] 9 is not smaller/equal to 8 (x), so i remains = 7 and no exchange is made.

The for loop finishes, and so we exchange A[7 + 1] with A[9]

A = [2,3,6,7,1,5,4,8,9]

Then we return 7 + 1

We now go back to line 2 of QUICKSORT, and set q = 8.

Next, we call QUICKSORT(A, 1, 8-1)
     p           r
A = [2,3,6,7,1,5,4,8,9]

p is less than r, so we call PARTITION(A, p = 1, r = 7)

x = A[r = 7] = 4    i = 1 -1 = 0     j = p = 1
for loop will run from j = 1 to 6 (r - 1)

j = 1:   A[j=1] 2 is smaller than 4 (x), so i = 1 & we swap A[i=1] with A[j=1]

j = 2:   A[j=2] 3 is smaller than x=4, so i = 2 & we swap A[i=2] with A[j=2]

j = 3:   A[j=3] 6 is not smaller/equal to x=4, so i remains = 2 and no exchange is made

j = 4:   A[j=4] 7 is not smaller/equal to x=4, so i remains = 2 and no exchange is made

j = 5:   A[j=5] 1 is smaller than x=4, so i = 3, & we swap A[i=3] with A[j=5]

                 p               r
            A = [2,3,"1",7,"6",5,4,8,9]
            
            j = 6:   A[j=6] 5 is not smaller/equal to x=4, so i remains = 3 and no exchange is made
            
            The foor loop finishes, so we execute line 7, and exchange a[i=3 + 1] with A[r=7]
            
                 p              r
            A = [2,3,1,"4",6,5,"7",8,9]

Then we return i=3 + 1

We then return to our second call of QUICKSORT, 



13, 19, 9, 5, 12, 8, 7, 4, 11, 2, 6, 10

9, 19, 13, 5, 12, 8 ,7 ,4, 11, 2 , 6, 10

9, 5, 13, 19, 12, 8 ,7 ,4, 11, 2 , 6, 10

9, 5, 8, 19, 12, 13, 7, 4, 11, 2 , 6, 10

9, 5, 8, 7, 12, 13, 19, 4, 11, 2 , 6, 10

9, 5, 8, 7, 4, 13, 19, 12, 11, 2 , 6, 10

9, 5, 8, 7, 4, 2, 19, 12, 11, 13 , 6, 10

9, 5, 8, 7, 4, 2, 6, 12, 11, 13 , 19, 10

9, 5, 8, 7, 4, 2, 6, 10, 11, 13 , 19, 12




DESCENDING - PARTITION(A, p, r)
1    x = A[r] // x stores the "pivot", and it always the last element in the array
2    i = p - 1 //i and j work through the array. j starts at the first element, and increments by 1 regardless of what happens.
3   for j = p to r - 1 //j runs from the first element to the last element - 1.
4        if A[j] >= x //A[j] is compared with the x(pivot), and if A[j] is lower, then it is swapped with A[i].
5            i = i + 1 //if A[j] is lower than the pivot (x), i gets incremented by 1
6            exchange A[i] with A[j] //then we swap A[j] and A[i]
7    exchange a[i + 1] with A[r] // after our for loop is completed, we move our pivot to i + 1, i being the last location of a key that was lower than the pivot.
8    return i + 1 //we return the index of the pivot


Descending-QuickSort (A, p, r)
if p < r
     q = Descending-Partition (A, p, r) 
     Descending-QuickSort (A, p, q-1) 
     Descending-QuickSort (A, q+1, r )

T(n)= T(n-1) + θ(n) has the solution T(n)= θ(n2).

"During the running of the procedure RANDOMIZED-QUICKSORT, 
how many calls are made to the random-number generator RANDOM in the worst case? 
How does the answer change in the best case?"

When sorting an array from decremental to incremental order, 
we are basically looking at the worse-case scenario. As given in the textbook, 
this has a running time of Θ(n^2) . In more detail, every time when the for 
loop completes in the Partition algorithm, it will produce alternating empty arrays e.g. 
on the left, then on the right turn-by-turn. As such, it will follow the
recurrence, T(n)=T(n-1) + Θ(n), which we have proved in the previous question 
(Activity 4 Exercise 2) to have a running time of Θ(n^2).


"Why do we expect the average-case performance of a randomised algorithm and not 
its worst-case performance?"

In the worst case, similar to the previous question, the randomly selected pivot results in 
two unbalanced subarrays with one array being empty and the other having a length n-1. 
As such, we will need a total of n-number of calls. However, note that for the last call, 
we will have RANDOM(p,r) with p=r, because the subarray has only one element.
In the best case, we always obtain the mid-value of the array, as such, we will execute 
1+2+4+8+...+n times or equivalently, n+n/2+n/4+...+1, which amounts to 2n-1.